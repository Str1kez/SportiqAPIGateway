worker_processes 1;

events {
  worker_connections 1024;
}

env KDS_DB_URL;
env KDS_DB_PORT;

http {
  lua_package_path "$prefix/lua/?.ljbc;$prefix/lua/?.lua;;";
  resolver 127.0.0.11;  # for dns docker
  
  init_by_lua_block {
    require "key"
    require "cjson"
    require "responses"
    require "auth"
  }

  server {
    listen 8080;
    listen 443 ssl;
    default_type application/json;

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    # User proxy
    location ~ /api/user/auth/(login|signup|token/refresh|token/refresh-revoke)$ {
      proxy_hide_header 'access-control-allow-origin';
      add_header 'Content-Security-Policy' 'upgrade-insecure-requests';
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      access_by_lua_block {
        local origin = ngx.req.get_headers()["Origin"]
        ngx.header["Access-Control-Allow-Origin"] = origin
        ngx.header["Access-Control-Allow-Headers"] = "Content-Type, Authorization"
        ngx.header["Access-Control-Max-Age"] = 600
        ngx.header["Access-Control-Allow-Methods"] = "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
        if ngx.req.get_method() == "OPTIONS" then
        ngx.header["Access-Control-Allow-Credentials"] = "true"
          ngx.exit(ngx.HTTP_OK)
        end
      }
      proxy_pass http://user_service:8000/api/v1/auth/$1;
    }

    location = /api/user/docs {
      proxy_pass http://user_service:8000/docs;
    }

    location /api/user/auth/token {
      proxy_hide_header 'access-control-allow-origin';
      add_header 'Content-Security-Policy' 'upgrade-insecure-requests';
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      access_by_lua_block {
        local origin = ngx.req.get_headers()["Origin"]
        ngx.header["Access-Control-Allow-Origin"] = origin
        ngx.header["Access-Control-Allow-Headers"] = "Content-Type, Authorization"
        ngx.header["Access-Control-Allow-Credentials"] = "true"
        ngx.header["Access-Control-Max-Age"] = 600
        ngx.header["Access-Control-Allow-Methods"] = "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
        if ngx.req.get_method() == "OPTIONS" then
          ngx.exit(ngx.HTTP_OK)
        end
        local key_db = require "key".new()
        local cjson = require "cjson"
        local auth = require "auth"

        local secret_key = key_db:get_secret()
        local verified_jwt_content = auth.check_token(ngx.req.get_headers(), secret_key)

        -- ngx.header["User"] = verified_jwt_content["payload"]["user"]
        -- ngx.req.set_header("User", verified_jwt_content["payload"]["user"])
        ngx.req.set_header("Token", verified_jwt_content["payload"]["jti"])
        -- ngx.say(cjson.encode({ message = "Аутентификация пройдена" }))
      }
      proxy_pass http://user_service:8000/api/v1/auth/token;
    }

    location /api/user {
      proxy_hide_header 'access-control-allow-origin';
      add_header 'Content-Security-Policy' 'upgrade-insecure-requests';
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;

      access_by_lua_block {
        local origin = ngx.req.get_headers()["Origin"]
        ngx.header["Access-Control-Allow-Origin"] = origin
        ngx.header["Access-Control-Allow-Headers"] = "Content-Type, Authorization"
        ngx.header["Access-Control-Allow-Credentials"] = "true"
        ngx.header["Access-Control-Max-Age"] = 600
        ngx.header["Access-Control-Allow-Methods"] = "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
        if ngx.req.get_method() == "OPTIONS" then
          ngx.exit(ngx.HTTP_OK)
        end

        local key_db = require "key".new()
        local cjson = require "cjson"
        local auth = require "auth"

        local secret_key = key_db:get_secret()
        local verified_jwt_content = auth.check_token(ngx.req.get_headers(), secret_key)

        -- ngx.header["User"] = verified_jwt_content["payload"]["user"]
        ngx.req.set_header("User", verified_jwt_content["payload"]["user"])
        -- ngx.req.set_header("Token", verified_jwt_content["payload"]["jti"])
        -- ngx.say(cjson.encode({ message = "Аутентификация пройдена" }))
      }
      proxy_pass http://user_service:8000/api/v1/user;
    }

    # Event proxy

    location = /api/event/docs {
      proxy_pass http://event_service:8001/docs;
    }

    location = /api/event/type {
      proxy_hide_header 'access-control-allow-origin';
      add_header 'Content-Security-Policy' 'upgrade-insecure-requests';
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;

      access_by_lua_block {
        local origin = ngx.req.get_headers()["Origin"]
        ngx.header["Access-Control-Allow-Origin"] = origin
        ngx.header["Access-Control-Allow-Headers"] = "Content-Type, Authorization"
        ngx.header["Access-Control-Allow-Credentials"] = "true"
        ngx.header["Access-Control-Max-Age"] = 600
        ngx.header["Access-Control-Allow-Methods"] = "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
        if ngx.req.get_method() == "OPTIONS" then
          ngx.exit(ngx.HTTP_OK)
        end
        local key_db = require "key".new()
        local cjson = require "cjson"
        local auth = require "auth"

        local secret_key = key_db:get_secret()
        local verified_jwt_content = auth.check_token(ngx.req.get_headers(), secret_key)
      }
      proxy_pass http://event_service:8001/api/v1/type;
    }

    location = /api/event/status {
      proxy_hide_header 'access-control-allow-origin';
      add_header 'Content-Security-Policy' 'upgrade-insecure-requests';
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;

      access_by_lua_block {
        local origin = ngx.req.get_headers()["Origin"]
        ngx.header["Access-Control-Allow-Origin"] = origin
        ngx.header["Access-Control-Allow-Headers"] = "Content-Type, Authorization"
        ngx.header["Access-Control-Allow-Credentials"] = "true"
        ngx.header["Access-Control-Max-Age"] = 600
        ngx.header["Access-Control-Allow-Methods"] = "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
        if ngx.req.get_method() == "OPTIONS" then
          ngx.exit(ngx.HTTP_OK)
        end
        local key_db = require "key".new()
        local cjson = require "cjson"
        local auth = require "auth"

        local secret_key = key_db:get_secret()
        local verified_jwt_content = auth.check_token(ngx.req.get_headers(), secret_key)
      }
      proxy_pass http://event_service:8001/api/v1/status;
    }

    location /api/event {
      proxy_hide_header 'access-control-allow-origin';
      add_header 'Content-Security-Policy' 'upgrade-insecure-requests';
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;

      access_by_lua_block {
        local origin = ngx.req.get_headers()["Origin"]
        ngx.header["Access-Control-Allow-Origin"] = origin
        ngx.header["Access-Control-Allow-Headers"] = "Content-Type, Authorization"
        ngx.header["Access-Control-Allow-Credentials"] = "true"
        ngx.header["Access-Control-Max-Age"] = 600
        ngx.header["Access-Control-Allow-Methods"] = "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
        if ngx.req.get_method() == "OPTIONS" then
          ngx.exit(ngx.HTTP_OK)
        end
        local key_db = require "key".new()
        local cjson = require "cjson"
        local auth = require "auth"

        local secret_key = key_db:get_secret()
        local verified_jwt_content = auth.check_token(ngx.req.get_headers(), secret_key)

        ngx.req.set_header("User", verified_jwt_content["payload"]["user"])
      }
      proxy_pass http://event_service:8001/api/v1/event;
    }

    # Subscription proxy

    location /api/subscription {
      proxy_hide_header 'access-control-allow-origin';
      add_header 'Content-Security-Policy' 'upgrade-insecure-requests';
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;

      access_by_lua_block {
        local origin = ngx.req.get_headers()["Origin"]
        ngx.header["Access-Control-Allow-Origin"] = origin
        ngx.header["Access-Control-Allow-Headers"] = "Content-Type, Authorization"
        ngx.header["Access-Control-Allow-Credentials"] = "true"
        ngx.header["Access-Control-Max-Age"] = 600
        ngx.header["Access-Control-Allow-Methods"] = "DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT"
        if ngx.req.get_method() == "OPTIONS" then
          ngx.exit(ngx.HTTP_OK)
        end
        local key_db = require "key".new()
        local cjson = require "cjson"
        local auth = require "auth"

        local secret_key = key_db:get_secret()
        local verified_jwt_content = auth.check_token(ngx.req.get_headers(), secret_key)

        ngx.req.set_header("User", verified_jwt_content["payload"]["user"])
      }
      proxy_pass http://subscription_server:8002/api/v1/subscription;
    }

  }
}
